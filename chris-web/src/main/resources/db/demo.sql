delete from article;
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('1','欢迎加入noday的网络世界','这是一段简介，简要介绍这篇文章的内容。不需要太长，说个大概就行。而这篇文章就是本系统的介绍，','文章可设置封面图片、别名、url、分类和标签，封面可以用在列表和详细页；别名美化文章的访问链接；url会访问文章的默认访问地址；文章必须且只能选择一个分类，但可以有多个标签。','2012-12-28 23:54:47',NULL,'system-description',NULL,'6','0','1','','1',NULL,'0');
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('6','孩子“谈恋爱了”父母各种神反应，现在做家长的也太有爱了！','大学生给爸妈打电话，“爸/妈，我谈恋爱了”。得到的回复五花八门，各种爆笑：回家来，我给他买房；爱是有责任的；你可有了？太蒙了，都蒙太奇了！天呢，各种神反应，父母们都太有爱了……','<p>\n	大学生给爸妈打电话，“爸/妈，我谈恋爱了”。得到的回复五花八门，各种爆笑：回家来，我给他买房；爱是有责任的；你可有了？太蒙了，都蒙太奇了！天呢，各种神反应，父母们都太有爱了……\n</p>\n<p>\n	<embed src=\"http://player.youku.com/player.php/sid/XNDg4Nzc0NzY0/v.swf\" type=\"application/x-shockwave-flash\" width=\"550\" height=\"400\" quality=\"high\" />\n</p>','2012-12-29 23:45:58',NULL,NULL,NULL,'3','0','1',NULL,NULL,'我谈恋爱了,娱乐','0');
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('7','孩子“失恋”了，父母大人的爆笑反应，感情太丰富了不好啊亲~','现在第二弹来啦！！——大学生“失恋”了，看看父母们的爆笑反应！ 最后一个爹太了不起了，“你感情太丰富了！这不好~~”。父母们都太可爱了……','<p>\n	现在第二弹来啦！！——大学生“失恋”了，看看父母们的爆笑反应！ 最后一个爹太了不起了，“你感情太丰富了！这不好~~”。父母们都太可爱了……\n</p>\n<p>\n	<embed src=\"http://www.tudou.com/v/uwCPawRaJkI/&resourceId=0_04_02_99/v.swf\" type=\"application/x-shockwave-flash\" width=\"550\" height=\"400\" quality=\"high\" />\n</p>','2012-12-29 23:51:00',NULL,NULL,NULL,'4','0','1',NULL,NULL,'失恋,我被人甩了,我失恋了,娱乐','0');
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('8','十万个冷笑话第五集《福禄篇（2）》','十万个冷笑话第五集《福禄篇（2）》终于来了。话说，画风怎么不一样了？而且福禄娃们也忒不靠谱了，说好的笑点呢？竟然还广告植入！？节操掉了一地啊……','<p>\n	十万个冷笑话第五集《福禄篇（2）》终于来了。话说，画风怎么不一样了？而且福禄娃们也忒不靠谱了，说好的笑点呢？竟然还广告植入！？节操掉了一地啊……\n</p>\n<p>\n	<embed src=\"http://www.tudou.com/v/VevNFLbbC8A/&resourceId=0_04_02_99/v.swf\" type=\"application/x-shockwave-flash\" width=\"550\" height=\"400\" quality=\"high\" />\n</p>','2012-12-29 23:55:05',NULL,NULL,NULL,'1','0','1',NULL,NULL,'十万个冷笑话,娱乐','0');
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('9','工信部称我国明年做好发 4G 牌照准备','在近日举行的全国工业和信息化工作会议上，工信部的相关报告提出，将在2013年做好LTE牌照发放准备工作，这意味着4G牌照很有可能在明年发放。','<div>\n	<p>\n		在近日举行的全国工业和信息化工作会议上，工信部的相关报告提出，将在2013年做好LTE牌照发放准备工作，这意味着4G牌照很有可能在明年发放。\n	</p>\n	<p>\n		<img src=\"http://static.oschina.net/uploads/img/201212/29101013_LEuf.jpg\" alt=\"\" /> \n	</p>\n	<p>\n		报告中提出，“2013年我国将推动TD-SCDMA和TD-LTE协调发展，积极推进TD-LTE扩大规模试验，认真做好LTE频率分配和牌照发放准备工作”。\n	</p>\n	<p>\n		LTE俗称4G，此前的今年9月20日，工信部发布了《工业和信息化部关于国际移动通信系统频率规划事宜的通知》，将2500MHz-2690MHz的190MHz的频率用于TD-LTE或后续演进技术。\n	</p>\n	<p>\n		其后的10月份，工信部相关负责人又透露，将把1800MHz和2100MHz频段中未分配的两个60MHz频率资源，共120MHz用于FDD频率。\n	</p>\n	<p>\n		这样的话，两种LTE(4G)制式的频率分配已基本明确，剩下的只是发放牌照问题。而关于LTE(4G)牌照的发放时间，业界猜测诸多，有猜测明年5月国际电信日期间发放的，也有猜测明年10月份发放的，但其实目前肯定没有制定出时间表。\n	</p>\n	<p>\n		目前对获发TD-LTE牌照最积极的是中国移动，中国移动明年将进一步扩大试点规模，并通过新建和升级两种模式，使TD-LTE基站规模超过20万个，如果能获得国家相关部门批准，中国移动的真正目标是希望建设35到40万个TD-LTE基站。\n	</p>\n	<p>\n		想通过手机客户端访问开源中国：<a href=\"http://www.oschina.net/mobile\" target=\"_blank\">请点这里</a> \n	</p>\n</div>\n<div>\n</div>\n<div>\n	本文转载自: 新浪科技<br />\n(本站只作转载,不代表本站同意文中观点或证实文中信息)\n</div>','2012-12-30 00:02:41',NULL,NULL,NULL,'1','0','1',NULL,NULL,'4G','0');
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('11','关于HTML5的5个误解','12月17日W3C的CEO Jeff Jaffe宣布HTML5定义完成，即进入了Candidate Recommendation阶段，这距离它成为W3C的正式推荐标准（Recommendation阶段）已经很近。然而技术社区对于HTML5仍存在很多误解以至于错误理解这一事件的意义。本文试谈几点常见的误解帮助大家了解HTML5。','<p>\n	12月17日W3C的CEO Jeff Jaffe宣布HTML5定义完成，即进入了Candidate Recommendation阶段，这距离它成为W3C的正式推荐标准（Recommendation阶段）已经很近。然而技术社区对于HTML5仍存在很多误解以至于错误理解这一事件的意义。本文试谈几点常见的误解帮助大家了解HTML5。\n</p>\n<p>\n	<ul>\n		<li>\n			HTML5标准是超炫的技术\n		</li>\n	</ul>\n</p>\n<p>\n	HTML5标准本身是标记语言和语义的规范，所以它不会包括诸如API和样式这样的内容，标记语言和语义这种东西甚至是不可见的，当然更不可能“炫”了。通常社区中提到HTML5所指的是与HTML5差不多同时开始制定的一组新的标准，他们包括一些CSS3, Canvas 2d API, WebGL等API和新特性标准，WebGL甚至并非W3C标准。 这一次宣布完成的HTML5是HTML5标准本身，这仅仅意味着HTML5的新语法、新标签和语义已经有了稳定的定义，不会有大变更。而真正与开发密切相关的一些API标准并不在此列。\n</p>\n<p>\n	<ul>\n		<li>\n			HTML5是一项新技术\n		</li>\n	</ul>\n</p>\n<p>\n	HTML5所用的技术差不多在20年前就已经成熟，而HTML5本身也并非技术，而是标准。即使作为标准HTML5也并非新标准，而是一个工作了10年的标准HTML4.01的新版本，它是基本向下兼容的。 作为一份标准，HTML5的发布意味着这项技术已经完全成熟并且各大浏览器厂商和其它W3C会员达成了一致意见。尽管各方完全实现标准尚需时日，但是鉴于W3C几乎已经聚集了所有这份标准的相关方，所以几乎不会再出现另外的声音了。\n</p>\n<p>\n	<ul>\n		<li>\n			HTML5现在还不可用\n		</li>\n	</ul>\n</p>\n<p>\n	对于HTML5，既不应该说“可用”又不能说“不可用”。谈论HTML5是否可用是不恰当的，因为如上文所说通常意义所指的HTML5包含若干互相独立的技术标准，它们的可用性是相互独立的。 诸如WebGL，WebSocket这样的标准现在不论在移动还是桌面Web环境都几乎完全不可用。而语义化标签和HTML5标记语言语法（既HTML标准本身所规定的内容）现在则是可用到不能再可用的状态。 在这种状态下，更务实地去讨论具体的特性是否可用才是合理和正确的做法，在这方面<a href=\"http://caniuse.com/\">http://caniuse.com/</a>做了非常多深入而细致的研究。\n</p>\n<p>\n	<ul>\n		<li>\n			HTML5现在已经制定完成了\n		</li>\n	</ul>\n</p>\n<p>\n	因为一些历史原因，现有的HTML5的制订大部分是在WHATWG完成。而HTML5回到W3C之后，WHATWG将会继续维护一份HTML规范文档，这份文档将不会设定完成日期。这意味着仍然可能有大块的特性加入其中，且它永远不会像W3C规范一样变得稳定。 按照现有的模式，W3C将会逐步发布WHATWG版本的snapshot作为HTML新规范，在W3C的CEO宣布HTML5“完成”之时，HTML5.1版本已经开始制订了。\n</p>\n<p>\n	<ul>\n		<li>\n			HTML5的性能很差\n		</li>\n	</ul>\n</p>\n<p>\n	性能问题可能来自多方面，硬件、操作系统、应用代码都可能导致性能问题，然而性能问题唯独与标准关系不大。HTML5是一个标准，它本身不涉及任何性能。 有这样的断言应当是因为现在主流的浏览器实现都在移动端表现不佳，这与浏览器环境本身的复杂性的确密切相关，更涉及到不少W3C和WHATWG之外的标准（如JS、WebGL）。 应当明确的是，“HTML5程序性能表现不佳”仅仅是其相对于各个平台的原生应用来讲的，并不是HTML4.01性能更好了。比起HTML统治了桌面互联网大半江山的前几个版本，HTML5不论性能还是功能都是全面增强的。HTML更早版本的产品更新到HTML5将会是无需置疑和理所当然的。 HTML在移动领域面临的新的应用场景（Web Application）和面临的问题（性能和功能）则正是HTML5出现的原因，也是HTML5标准和它的实现者需要解决的问题。\n</p>\n<h2>\n	作者简介\n</h2>\n<p>\n	程劭非/winter，一淘网移动前端技术专家，技术Blog是<a href=\"http://winter-cn.cnblogs.com/\">http://winter-cn.cnblogs.com</a>，微博：<a href=\"http://weibo.com/wintercn\">@寒冬winter</a>。\n</p>\n<p>\n	转自infoq\n</p>','2012-12-30 00:09:51',NULL,NULL,NULL,'0','0','1',NULL,NULL,'html5','0');
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('12','Java开发者PaaS指南','PaaS（Platform-as-a-Service）是云服务的一种，服务提供商不仅提供按需索取的硬件和操作系统服务，还提供了应用程序平台和解决方案栈。对开发者而言，PaaS极大程度上减少了IT部署的开销和痛苦，按需为应用程序提供资源，让其更易伸缩。','<p>\n	PaaS（Platform-as-a-Service）是云服务的一种，服务提供商不仅提供按需索取的硬件和操作系统服务，还提供了应用程序平台和解决方案栈。对开发者而言，PaaS极大程度上减少了IT部署的开销和痛苦，按需为应用程序提供资源，让其更易伸缩。\n</p>\n<p>\n	JVM、应用服务器和部署包（例如，WAR和EAR）为Java应用程序提供了天然的隔离，允许不同开发者在同一套基础设施中部署应用程序，因此Java平台十分适合PaaS。但是，过去几年里，大多数PaaS产品都围绕着Ruby和Python这样的平台，当时Google App Engine是唯一为Java开发者提供PaaS服务的。幸运的是，现在的情况已经大为改善了。\n</p>\n<p>\n	差不多从去年开始，多家商业服务商进入了Java PaaS领域。这一举动很有意义，因为Java开发者差不多有1000万之多，也许是世界上最大的开发者群体之一。本文中，我们将从开发者的角度来比较这些服务提供商。特别要说明一下，具体比较以下4个方面：\n</p>\n<ul>\n	<li>\n		对技术平台和技术栈的支持。\n	</li>\n	<li>\n		对开发者生产力和开发过程的支持。\n	</li>\n	<li>\n		性能和可伸缩性。\n	</li>\n	<li>\n		价格和其他商业考量。\n	</li>\n</ul>\n<p>\n	文中我们会比较以下Java PaaS产品（按字母排序）。\n</p>\n<ul>\n	<li>\n		<a href=\"http://aws.amazon.com/elasticbeanstalk/\">Amazon Elastic Beanstalk</a>是Amazon构建于EC2云上的Java PaaS产品。其中提供了运行于EC2上的受管Tomcat实例，带有负载均衡器，还可按需提供伸缩能力。Amazon Elastic Beanstalk集成了Amazon Web Services的其他服务，能访问受管关系型数据库（RDS）、大数据存储（SimpleDB）、消息队列、电子邮件和其他服务。\n	</li>\n	<li>\n		<a href=\"http://www.cloudbees.com/\">CloudBees</a>是一家风投的创业公司，成员由JBoss和Sun的前雇员组成，最近在两轮融资中共募得1400万美元。CloudBees也许是个新名字，不过它在这个领域中的影响力正在不断扩大，为Java PaaS带来了多项独特的特性，尤其是持续集成——一个完整的云端开发/部署周期管理。此外，和Heroku一样，它还包含一个第三方插件和服务的市场。\n	</li>\n	<li>\n		<a href=\"http://www.cloudfoundry.com/\">Cloud Foundry</a>是VMware发起的一个开源产品。VMware软件驱动着虚拟化数据中心，这是大多数PaaS产品的基础。VMware还是Spring Framework的拥有者，它是在企业Java中非常流行的一个平台栈。Cloud Foundry的一个独一无二的特性是它根本无需成为受托管的PaaS，你可以下载其代码，自己托管PaaS！这样一来，它既是一个托管平台，也是一个受托管PaaS服务。\n	</li>\n	<li>\n		<a href=\"http://code.google.com/appengine/\">Google App Engine for Java</a>也许是市面上问世时间最长（也是最成熟）的Java PaaS产品。它的目标是提供线性伸缩性，而且不担心对Java平台本身做出巨大变化。\n	</li>\n	<li>\n		<a href=\"http://www.heroku.com/java\">Heroku for Java</a>是PaaS大厂Heroku最近才推出的产品，Heroku在Ruby社区颇受欢迎。\n	</li>\n	<li>\n		<a href=\"https://openshift.redhat.com/\">Red Hat OpenShift</a>是Red Hat试水PaaS的实验性产品。Red Hat的JBoss Application Server （AS）是最流行的Java应用服务器之一，OpenShift服务提供了全面的JBoss AS支持。\n	</li>\n</ul>\n<h2>\n	支持的技术平台和技术栈\n</h2>\n<p>\n	Java PaaS提供商最重要的属性之一就是它所支持的技术平台和技术栈。总而言之，技术平台是Java PaaS区别于其他PaaS产品的地方。在Java平台的长期进化中，涌现了很多颇有竞争力的技术栈。对于Java PaaS厂商而言，我相信尽可能多地支持不同技术栈是十分重要的。\n</p>\n<p>\n	这方面OpenShift和CloudBees对技术的支持面最广，从简单的Servlet容器（一般是Tomcat）到完整的Java EE 6 Web Profile（JBoss AS 7）都有支持。Java PaaS先驱，Google App Engine，在标准支持方面与后来者的差距最大。Google App Engine不支持完整的Java SE平台，因此对很多流行框架的支持都很差。它还要求用户使用Google App Engine自己的网络和持久化API，而不是支持公开标准，这让应用程序很难迁移。类似的，Heroku for Java要求应用程序围绕它自己的Jetty实例做封装，打破了传统Java EE应用程序的部署模型。\n</p>\n<p>\n	Cloud Foundry项目支持Tomcat容器，但它的应用程序开发和部署针对Spring Framework做了大量优化，创建了一个半外置的依赖。因为VMware拥有Spring Framework，所以Cloud Foundry很适合基于Spring的应用程序。此外，它还支持使用<a href=\"http://www.rabbitmq.com/\">Rabbit</a><a href=\"http://www.rabbitmq.com/\">MQ</a>的消息队列，这是基于<a href=\"http://www.amqp.org/\">AMQP</a>标准的。但它对其他Java框架（例如Java EE）的支持很弱。\n</p>\n<table border=\"1\">\n	<tbody>\n		<tr>\n			<td>\n				\n			</td>\n			<td>\n				<p>\n					Amazon Beanstalk\n				</p>\n			</td>\n			<td>\n				<p>\n					CloudBees\n				</p>\n			</td>\n			<td>\n				<p>\n					Cloud Foundry\n				</p>\n			</td>\n			<td>\n				<p>\n					Google App Engine\n				</p>\n			</td>\n			<td>\n				<p>\n					Heroku for Java\n				</p>\n			</td>\n			<td>\n				<p>\n					OpenShift\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					Tomcat\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					Java SE\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					Java EE\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					支持标准 Java库\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					文件系统访问\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					线程访问\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					对外网络连接\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					受限\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					MySQL\n				</p>\n			</td>\n			<td>\n				<p>\n					RDS\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					付费方案\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					商业关系型数据库\n				</p>\n			</td>\n			<td>\n				<p>\n					RDS\n				</p>\n			</td>\n			<td>\n				<p>\n					外置\n				</p>\n			</td>\n			<td>\n				<p>\n					外置\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					外置\n				</p>\n			</td>\n			<td>\n				<p>\n					外置\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					Big Data支持\n				</p>\n			</td>\n			<td>\n				<p>\n					SimpleDB\n				</p>\n			</td>\n			<td>\n				<p>\n					外置\n				</p>\n			</td>\n			<td>\n				<p>\n					外置\n				</p>\n			</td>\n			<td>\n				<p>\n					BigTable\n				</p>\n			</td>\n			<td>\n				<p>\n					外置\n				</p>\n			</td>\n			<td>\n				<p>\n					外置\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					部署时无需特殊框架\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					方便迁移现有应用\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					应用可移植性\n				</p>\n			</td>\n			<td>\n				<p>\n					高\n				</p>\n			</td>\n			<td>\n				<p>\n					高\n				</p>\n			</td>\n			<td>\n				<p>\n					中\n				</p>\n			</td>\n			<td>\n				<p>\n					低\n				</p>\n			</td>\n			<td>\n				<p>\n					低\n				</p>\n			</td>\n			<td>\n				<p>\n					高\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					可用于生产环境\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					Beta阶段\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					Beta阶段\n				</p>\n			</td>\n			<td>\n				<p>\n					Beta阶段\n				</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n<p>\n	<br />\n</p>\n<h2>\n	对开发者生产力和开发过程的支持\n</h2>\n<p>\n	PaaS的关键价值之一，是让应用程序开发者的生活更简单，因为它消除了应用程序和资源管理的开销。所以说，对开发者友好，有工具集成是我们的一个重要考量点。\n</p>\n<p>\n	在这方面CloudBees无疑是赢家。它不仅是一个PaaS运行时环境，还是一个完整的构建和测试环境。开发者可以利用Jenkins服务让CloudBees自动并持续地签出、构建、测试并报告代码库中的代码。这个持续集成过程已经被运用于多个大型团队，作为他们软件开发过程的重要环节。但是，构建服务器管理对QA团队而言是一项费时费力的工作。CloudBees替QA团队承担了这份痛苦，让这一过程对开发者更加透明。最近，Red Hat OpenShift通过支持Maven和Jekins集成，在这个领域里慢慢追上CloudBees了。\n</p>\n<p>\n	Amazon Beanstalk、OpenShift和Google App Engine都提供了开发工具、SDK和IDE插件，与其他市面上的基于Java的工具保持一致。\n</p>\n<p>\n	相比Java开发者，Cloud Foundry和Heroku for Java提供了更适合Ruby开发者的工具。试用了这些工具后，我怀疑很多Java开发者可能要花一些时间来适应其中的惯例和术语。另外，Cloud Foundry目前还缺乏文档，举个例子，它的很多文档还是视频教程形式的。虽然视频教程很容易让开发者上手，但在部署重要应用或希望了解视频场景之外的内容时，这些内容显然缺乏深度。尽管Cloud Foundry平台在最近几年里经历了重大变更，但官方入门指南文档的日期还停留在2007年。目前已经有了更多的文档——比如<a href=\"http://support.cloudfoundry.com/entries/20012337-getting-started-guide-command-line-vmc-users\">这篇</a>，但它们不该这么难找。\n</p>\n<p>\n	另一个重要的问题，Cloud Foundry允许开发者配置自己的云环境，部署Micro Cloud可比仅仅安装一套SDK麻烦多了。这也是一个障碍，让很多开发者对Cloud Foundry望而却步。\n</p>\n<table border=\"1\">\n	<tbody>\n		<tr>\n			<td>\n				\n			</td>\n			<td>\n				<p>\n					Amazon Beanstalk\n				</p>\n			</td>\n			<td>\n				<p>\n					CloudBees\n				</p>\n			</td>\n			<td>\n				<p>\n					Cloud Foundry\n				</p>\n			</td>\n			<td>\n				<p>\n					Google App Engine\n				</p>\n			</td>\n			<td>\n				<p>\n					Heroku for Java\n				</p>\n			</td>\n			<td>\n				<p>\n					OpenShift\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					IDE工具\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					命令行工具\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					基于Web的控制台\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					开发机上进行测试\n				</p>\n			</td>\n			<td>\n				<p>\n					简单\n				</p>\n			</td>\n			<td>\n				<p>\n					简单\n				</p>\n			</td>\n			<td>\n				<p>\n					困难\n				</p>\n			</td>\n			<td>\n				<p>\n					困难\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					简单\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					构件时无非标准依赖\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					源码控制集成\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					部分\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					集成构建\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					集成测试\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					通过Web访问日志\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					第三方开发者/测试服务\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					API访问\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					文档\n				</p>\n			</td>\n			<td>\n				<p>\n					好\n				</p>\n			</td>\n			<td>\n				<p>\n					好\n				</p>\n			</td>\n			<td>\n				<p>\n					差\n				</p>\n			</td>\n			<td>\n				<p>\n					好\n				</p>\n			</td>\n			<td>\n				<p>\n					好\n				</p>\n			</td>\n			<td>\n				<p>\n					好\n				</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n<p>\n	<br />\n</p>\n<h2>\n	性能和可伸缩性\n</h2>\n<p>\n	PaaS最重要的特性之一是平台自动伸缩的能力，就是基于实时流量需求增加或减少服务器容量。这要求平台提供商在众多服务器之间对请求做负载均衡，监控各台服务器的负载，适时启动新服务器。\n</p>\n<p>\n	所有PaaS提供商都在一定程度上支持自动伸缩。但自动扩展远比看上去困难。对入门用户而言，Java EE应用程序必须被配置为访问中心化外部数据库，而不是访问部署在同一台服务器上的数据库。所有PaaS提供商的编程范式和工具都要强制开发者遵循这种方式。\n</p>\n<p>\n	更大的问题是HTTP会话。在Java应用服务器上，HTTP会话的会话状态默认是在内存里管理的。要构建能在不同服务器之间负载均衡的应用程序，开发者必须使用以下的某个方法：\n</p>\n<ul>\n	<li>\n		配置负载均衡器支持“粘性会话”（sticky session），负载均衡器会检查所有流入请求的会话ID，总是把同一会话的请求发给相同的服务器。这是最简单的方法，不过也有自己的问题：负载均衡器需要完成更多的工作，久而久之负载分发会变得不再均衡，而且在负载下降时，很难撤下扩上去的基础设施，因为每台服务器都有自己的会话。出于这些原因，很少有PaaS提供商支持这一方法。\n	</li>\n	<li>\n		为内存中的HTTP会话配置一个共享的缓存。如此一来，每时每刻所有服务器都能在内存里拥有全部HTTP会话。但是，在集群中复制内存会话这项任务既耗费带宽，又消耗计算资源。它要求应用程序开发者配置共享缓存和复制策略。\n	</li>\n	<li>\n		还可以配置应用程序，将所有HTTP会话持久化到外部关系型数据库中。\n	</li>\n</ul>\n<p>\n	上述所有的PaaS平台中，Google App Engine对这一问题的处理是最好的。它在架构上就将单一服务器的概念抽象了出来，会自动在不同的服务器上创建数据存储，并默认将HTTP会话保存到数据存储中，这一过程对开发者是透明的。但是，Google App Engine的问题是原生的性能太差，一个Web请求要花1至3秒才能完成一次对数据库的访问。\n</p>\n<p>\n	Heroku for Java的每个服务器实例都封装了一个自定义的Jetty实例，因此它也提供了跨服务器实例自动共享会话的能力。然而，Heroku并不提供透明的自动伸缩，你需要观察仪表盘，适时为应用添加资源。\n</p>\n<p>\n	剩余的标准Java PaaS产品都强制要求开发者在专门的数据库服务器上创建数据表，这也是部署过程的一部分。对于HTTP会话，Cloud Foundry在负载均衡器中使用了粘性会话。正如上文讨论的那样，这种做法为开发者带来了便利，也有一些严重的问题。其他PaaS产品虽然没有明说，但都把会话管理的工作留给了应用程序开发者。\n</p>\n<table border=\"1\">\n	<tbody>\n		<tr>\n			<td>\n				\n			</td>\n			<td>\n				<p>\n					Amazon Beanstalk\n				</p>\n			</td>\n			<td>\n				<p>\n					CloudBees\n				</p>\n			</td>\n			<td>\n				<p>\n					Cloud Foundry\n				</p>\n			</td>\n			<td>\n				<p>\n					Google App Engine\n				</p>\n			</td>\n			<td>\n				<p>\n					Heroku for Java\n				</p>\n			</td>\n			<td>\n				<p>\n					OpenShift\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					内建负载均衡器\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					负载均衡器自定义域名\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					Google Apps\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					自动伸缩应用服务器\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					计划支持\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					自动伸缩数据库\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					用户定义性能标准\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					计划支持\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					基于Web的监控仪表盘\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					计划支持\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					集群HTTP会话\n				</p>\n			</td>\n			<td>\n				<p>\n					手工\n				</p>\n			</td>\n			<td>\n				<p>\n					手工\n				</p>\n			</td>\n			<td>\n				<p>\n					手工\n				</p>\n			</td>\n			<td>\n				<p>\n					自动\n				</p>\n			</td>\n			<td>\n				<p>\n					自动\n				</p>\n			</td>\n			<td>\n				<p>\n					手工\n				</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n<p>\n	<br />\n</p>\n<h2>\n	价格及其他商业考量\n</h2>\n<p>\n	对开发者而言，PaaS产品的价格是十分重要的。大多数服务提供商都有免费服务供开发者试用，这些免费服务对较小的Java Web站点来说就是很好的选择。\n</p>\n<p>\n	但是，正如Google App Engine最近的涨价风波所反映的那样，大型Web应用程序使用PaaS的成本还是很高的。\n</p>\n<p>\n	另一个要考虑的重要因素是支持。Google App Engine和Amazon Web Services在支持方面表现糟糕。开发者只能自己在论坛上寻找答案。稍小的专注于Java的提供商提供了更好的技术支持，在公共论坛上亦是如此。在我看来CloudBees提供的支持最为出色，很好地结合了付费问题单的支持和支持人员间的Java专业技术秘诀。\n</p>\n<table border=\"1\">\n	<tbody>\n		<tr>\n			<td>\n				\n			</td>\n			<td>\n				<p>\n					Amazon Beanstalk\n				</p>\n			</td>\n			<td>\n				<p>\n					CloudBees\n				</p>\n			</td>\n			<td>\n				<p>\n					Cloud Foundry\n				</p>\n			</td>\n			<td>\n				<p>\n					Google App Engine\n				</p>\n			</td>\n			<td>\n				<p>\n					Heroku for Java\n				</p>\n			</td>\n			<td>\n				<p>\n					OpenShift\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					是否有免费服务\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					N/A\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					免费\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					低流量入门级Web应用成本\n				</p>\n			</td>\n			<td>\n				<p>\n					高\n				</p>\n			</td>\n			<td>\n				<p>\n					免费\n				</p>\n			</td>\n			<td>\n				<p>\n					免费\n				</p>\n			</td>\n			<td>\n				<p>\n					免费\n				</p>\n			</td>\n			<td>\n				<p>\n					免费\n				</p>\n			</td>\n			<td>\n				<p>\n					免费\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					跨云提供商\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					计划支持\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					计划支持\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					私有云\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					Beta阶段（OpenStack或vSphere）\n				</p>\n			</td>\n			<td>\n				<p>\n					是\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					否\n				</p>\n			</td>\n			<td>\n				<p>\n					计划支持\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					支持\n				</p>\n			</td>\n			<td>\n				<p>\n					论坛\n				</p>\n			</td>\n			<td>\n				<p>\n					电子邮件和电话\n				</p>\n			</td>\n			<td>\n				<p>\n					论坛 / Web支持问题单\n				</p>\n			</td>\n			<td>\n				<p>\n					论坛\n				</p>\n			</td>\n			<td>\n				<p>\n					电子邮件和电话\n				</p>\n			</td>\n			<td>\n				<p>\n					论坛\n				</p>\n			</td>\n		</tr>\n		<tr>\n			<td>\n				<p>\n					支持质量\n				</p>\n			</td>\n			<td>\n				<p>\n					差\n				</p>\n			</td>\n			<td>\n				<p>\n					好\n				</p>\n			</td>\n			<td>\n				<p>\n					好\n				</p>\n			</td>\n			<td>\n				<p>\n					差\n				</p>\n			</td>\n			<td>\n				<p>\n					一般\n				</p>\n			</td>\n			<td>\n				<p>\n					好\n				</p>\n			</td>\n		</tr>\n	</tbody>\n</table>\n<p>\n	<br />\n</p>\n<h2>\n	下一步\n</h2>\n<p>\n	文中我们讨论了Java PaaS领域的6个知名厂商，当然，现在还有一些稍小的或不那么有名的提供商，比如：\n</p>\n<ul>\n	<li>\n		<a href=\"http://jelastic.com/\">Jelastic</a>：它支持很多应用服务器和数据库的组合，包括MySQL数据库的多个变种和NoSQL数据库。\n	</li>\n	<li>\n		<a href=\"http://wso2.com/cloud/stratoslive/\">WSO2 StratosLive</a>：它是构建于WSO2应用服务器上的PaaS产品，WSO2是一款符合Java EE规范的应用服务器。\n	</li>\n	<li>\n		<a href=\"http://cumulogic.com/\">CumuLogic</a>：它提供的Java 应用服务PaaS可以运行于很多私有云和公有云解决方案上，包含CloudStack、 OpenStack和Eucalyptus。\n	</li>\n</ul>\n<p>\n	我们会密切注意这些小厂商，因为它们很轻松地就能成长起来挑战大厂商的市场份额和关注度。\n</p>\n<p>\n	Java PaaS在过去的12个月里经历了很多，各种产品仍在快速发展，这对那些寻找低价、可伸缩、甚至是免费托管解决方案的Java开发者来说是个天大的好消息。对Java EE开发者而言，我相信CloudBes和OpenShift是目前市面上最好的产品，考虑到OpenShift仍处在Beta阶段，所以CloudBees成为了这场比赛的赢家。如果你愿意尝试一下Java专业户以外的选择，Heroku for Java和Cloud Foundry（Beta）是老牌Google App Engine的有力竞争对手。\n</p>','2012-12-30 00:14:08',NULL,NULL,NULL,'1','0','1',NULL,NULL,'paas,java,cloud foundry,gae,openshift','0');
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('13','VMware计划交出SpringSource、Cloud Foundry等','经过了几个月的评估，VMware官方已经宣布计划将其诸多的二级技术包括Spring框架、分布式内存数据缓存GemFire、Cloud Foundry PaaS以及Hadoop分析工具Cetas转移给母公司EMC，作为新组建的公司Pivotal的一部分。由此产生的子公司将会把这些技术连同EMC2010年收购的大数据分析平台Greenplum以及去年收购的敏捷开发工具Pivotal Labs组合起来。','<p>\n	经过了几个月的评估，VMware官方已经宣布计划将其诸多的二级技术包括<a href=\"http://www.springsource.org/\">Spring框架</a>、分布式内存数据缓存<a href=\"http://www.vmware.com/products/application-platform/vfabric-gemfire/overview.html\">GemFire</a>、<a href=\"http://www.cloudfoundry.com/\">Cloud Foundry</a>PaaS以及Hadoop分析工具<a href=\"http://www.cetas.net/\">Cetas</a>转移给母公司EMC，作为新组建的公司Pivotal的一部分。由此产生的子公司将会把这些技术连同EMC2010年收购的大数据分析平台<a href=\"http://www.greenplum.com/\">Greenplum</a>以及去年收购的敏捷开发工具<a href=\"http://pivotallabs.com/\">Pivotal Labs</a>组合起来。\n</p>\n<p>\n	这个集团将会包含VMware的600名员工以及EMC的800名员工。它将会由Paul Maritz来领导，他在VMware担任了四年的CEO后今年夏天离任。\n</p>\n<p>\n	“两家公司希望到2013年的第二季度正式将这些资源组合起来”，EMC的通信副总裁Terry Anderson在<a href=\"http://blogs.vmware.com/console/\">官方博客回复</a>中写道，“并确定一个特殊的运作结构”。\n</p>\n<blockquote>\n	<p>\n		这对于VMware和EMC来说都是一个很大机遇来提供思想和技术上的领导力，不仅在基础设施层面，还有快速增长和变化的应用程序开发以及大数据市场。对于联合成立的公司而言，组合这些资源是利用这个转型期并快速响应正在上升的机会的最好方式。\n	</p>\n</blockquote>\n<p>\n	VMware在企业数据中心的服务器虚拟化领域依旧是主导者，但是这个市场逐渐变成了一种日用品。同时，VMware于2011年构建的开源PaaS Cloud Foundry赢得了关注，VMware试图使用它在商业云服务上占据一席之地。同时，Amazon已经为其云产品添加了如<a href=\"http://aws.amazon.com/redshift/\">Redshift</a>数据仓库这样的服务，明显关注于吸引企业用户。\n</p>\n<p>\n	早在七月份论及这项举措的可能性时，GigaOM的Om Malik和Stacey Higginbotham<a href=\"http://gigaom.com/cloud/vmware-plans-cloud-spin-out-to-keep-up-with-microsoft-amazon-and-google/\">曾经给出过建议</a>，他们认为这种变化会使得VMware专注于核心基础设施——虚拟化、软件定义网络等，同时新的子公司可以努力在PaaS领域取得领导地位。\n</p>\n<blockquote>\n	<p>\n		这项举措可以帮助VMware（多数股权为存储供应商EMC所拥有）在云计算服务领域与Google、Microsoft和Amazon竞争。以上的三个竞争者正在构建基础设施和平台层并力图成为开发人员和企业客户的IT部门。\n	</p>\n</blockquote>\n<p>\n	InfoQ联系了VMware试图获取更多的信息，但是该公司此时没有进一步的声明。预计在新的一年里，两家公司都会有一些变更。\n</p>\n<p>\n	查看英文原文：<a href=\"http://www.infoq.com/news/2012/12/vmware-spins-out-spring\">VMware Spins Out SpringSource, Cloud Foundry and GemFire</a>\n</p>\n<p>\n	from infoq\n</p>','2012-12-30 00:19:09',NULL,NULL,NULL,'0','0','1',NULL,NULL,'VMware,SpringSource','0');
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('15','不好意思，插段笑话','我是怕你有事\n\n今天在女友宿舍，正巧碰到宿管大妈了。\n我很有礼貌的说了句，“6个女的我1个男的不会有事。”\n宿管大妈居然来了句“废话，我是怕你有事”。瞬间石化了。。。。','<h1>\n	我是怕你有事\n</h1>\n<p>\n	今天在女友宿舍，正巧碰到宿管大妈了。\n</p>\n<p>\n	我很有礼貌的说了句，“6个女的我1个男的不会有事。”\n</p>\n<p>\n	宿管大妈居然来了句“废话，我是怕你有事”。瞬间石化了。。。。\n</p>\n<p>\n	<br />\n</p>','2012-12-30 00:26:43',NULL,NULL,NULL,'0','0','1',NULL,NULL,'笑话,娱乐','0');
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('16','有意思的双人舞','','<embed src=\"http://player.youku.com/player.php/sid/XMzgwNDQwNzg0/v.swf\" type=\"application/x-shockwave-flash\" width=\"550\" height=\"400\" quality=\"high\" />','2012-12-30 00:28:06',NULL,NULL,NULL,'0','0','1',NULL,NULL,'娱乐','0');
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('17','三人恰恰恰,笑抽了','','<p>\n	真是太有趣了\n</p>\n<p>\n	<embed src=\"http://www.tudou.com/v/Obowi7eApyg/&resourceId=0_04_02_99/v.swf\" type=\"application/x-shockwave-flash\" width=\"550\" height=\"400\" quality=\"high\" />\n</p>','2012-12-30 00:28:51',NULL,NULL,NULL,'1','0','1',NULL,NULL,'娱乐','0');
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('18','十二届全国人大一次会议将于2013年3月5日在京召开','中新社北京12月28日电 十一届全国人大常委会第三十次会议28日表决通过了关于召开第十二届全国人民代表大会第一次会议的决定。根据这一决定，十二届全国人大一次会议于2013年3月5日在北京召开，会期约两周。','<p>\n	中新社北京12月28日电 十一届全国人大常委会第三十次会议28日表决通过了关于召开第十二届全国人民代表大会第一次会议的决定。根据这一决定，十二届全国人大一次会议于2013年3月5日在北京召开，会期约两周。\n</p>\n<p>\n	根据决定建议的会议议程，十二届全国人大一次会议，将听取和审议政府工作报告，审查和批准计划报告、预算报告，听取和审议人大常委会工作报告、“两高”工作报告，还将听取和审议国务院机构改革和职能转变方案。\n</p>\n<p>\n	会议还将选举十二届全国人大常委会委员长、副委员长、秘书长、委员；选举国家主席、副主席；决定国务院总理人选；决定国务院副总理、国务委员、各部部长、各委员会主任、中国人民银行行长、审计长、秘书长的人选；选举中华人民共和国中央军事委员会主席；决定中华人民共和国中央军事委员会副主席、委员的人选；选举最高人民法院院长、最高人民检察院检察长；决定十二届全国人大各专门委员会的设立及其组成人员的人选。\n</p>\n<p>\n	全国人大议事规则规定，全国人大常委会应该在全国人民代表大会会议举行前提出会议议程草案。议事规则还规定，每届全国人民代表大会第一次会议，在本届全国人民代表大会代表选举完成后的两个月内，由上届全国人大常委会召集。十一届全国人大到2013年3月任期届满，十二届全国人大代表应于2013年1月选出。目前，香港、澳门特别行政区十二届全国人大代表已经依法选举产生。据了解，其他选举单位的选举工作即将展开。\n</p>','2012-12-30 00:30:17',NULL,NULL,NULL,'0','0','1',NULL,NULL,'全国人大','0');
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('19','Google发布支持Java 7的App Engine预览版','Google的平台即服务（Platform-as-a-Service）产品App Engine在其10月份的更新中包含了对即将到来的Java 7支持的预览。该更新仅限于开发机使用，Google尚未给出官方支持的时间表','<p>\n	Google的平台即服务（Platform-as-a-Service）产品<a href=\"https://developers.google.com/appengine/\">App Engine</a>在其<a href=\"http://googleappengine.blogspot.co.uk/2012/10/app-engine-173-released.html\">10月份的更新</a>中包含了对即将到来的Java 7支持的预览。该更新仅限于开发机使用，Google尚未给出官方支持的时间表，简单说明如下：\n</p>\n<blockquote>\n	<p>\n		在即将发布的版本中，我们将包含一些新的Java 7功能，而且App Engine的Java运行时会正式支持Java 7。在新版本到来之前，我们强烈建议开发者开始使用Java 7来测试其应用程序，同时测试最新的App Engine Java SDK。\n	</p>\n</blockquote>\n<p>\n	Google支持的是Java 7的一个除方法句柄（即InvokeDynamic字节码指令）外的子集，至少目前已经支持Java 7中的所有新增类。不过它的确支持来自Coin项目的新语言特性：\n</p>\n<ul>\n	<li>\n		switch语句支持字符串变量\n	</li>\n	<li>\n		支持二进制整型字面量，数字字面量支持以下划线分隔\n	</li>\n	<li>\n		一个catch可以处理多个指定类型的异常，重新抛出异常会进行更精确的检查\n	</li>\n	<li>\n		改进了针对泛型实例创建（尖括号或菱形）的类型推断\n	</li>\n	<li>\n		try-with-resources语句\n	</li>\n	<li>\n		简化了可变参数方法的调用\n	</li>\n</ul>\n<p>\n	为了解决类名之间的冲突问题，Google也添加了一种实验性支持，即允许Java 开发者针对具体的JAR 文件设定类加载优先级。这可以通过XML 文档中的元素来配置：\n</p>\n<p>\n	这里并没有使用元素本身的顺序，因此如果有多个JAR文件都指定了优先级，则会使用原来的加载顺序。\n</p>\n<p>\n	其他面向Java的平台即服务提供商也已经支持Java 7，其中包括<a href=\"http://www.cloudbees.com/\">CloudBees</a>、<a href=\"http://jelastic.com/\">Jelastic</a>和Vmware的<a href=\"http://www.cloudfoundry.com/\">Cloud Foundry</a>。\n</p>\n<p>\n	查看英文原文：<a href=\"http://www.infoq.com/news/2012/11/java7-app-engine\">Google Previews Java 7 Support for App Engine</a> \n</p>','2012-12-30 00:35:13',NULL,NULL,NULL,'1','0','1',NULL,NULL,'gae,java7','0');
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('20','PLSQL Developer 你用的很方便吗，看看就方便了','PLSQL Developer 你用的很方便吗，看看就方便了','<p>\n	1、登录后默认自动选中My Objects\n</p>\n<p>\n	默认情况下，PLSQL Developer登录后，Brower里会选择All objects，如果你登录的用户是dba，要展开tables目录，正常情况都需要Wait几秒钟，而选择My Objects后响应速率则是以毫秒计算的。\n</p>\n<p>\n	设置方法：<br />\nTools菜单 -- Brower Filters，会打开Brower Folders的定单窗口，把“My Objects”设为默认即可。<br />\nTools菜单－－Brower Folders，中把你经常点的几个目录（比如：Tables Views Seq Functions Procedures）移得靠上一点，并加上颜色区分，这样你的平均寻表时间会大大缩短，试试看。\n</p>\n<p>\n	<br />\n2、记住密码\n</p>\n<p>\n	这是个有争议的功能，因为记住密码会给带来数据安全的问题。 但假如是开发用的库，密码甚至可以和用户名相同，每次输入密码实在没什么意义，可以考虑让PLSQL Developer记住密码。\n</p>\n<p>\n	设置方法：菜单Tools -- Preferences -- Oracle -- Logon History -- Store With Password\n</p>\n<p>\n	<br />\n</p>\n<p>\n	3、双击即显示表数据\n</p>\n<p>\n	鼠标双击表或者视图时的默认响应实在让我感到失望，因为我最关心的是表结构和数据，但是双击后这两件事情都没有发生，也许默认响应是高手们需要的，但对我来说查看数据和表结构是最主要的，其他的我不关心。不过好的是这是可以设置的，你可以给鼠标双击和拖放绑定需要的事件，比如：双击编辑数据，拖放显示表结构，Yeah！\n</p>\n<p>\n	设置方法：菜单Tools -- Preferences -- Browser，在右侧，为不同的Object Type绑定双击和拖放操作。\n</p>\n<p>\n	<br />\n4、SQL语句字符全部大写\n</p>\n<p>\n	自认为这是个好习惯，信息系统的核心是数据库，系统出问题时最先要查的就是SQL语句，怎样在浩瀚的日志中快速找到那条SQL语句是件比较痛苦的事情。 SQL语句全部大写并不能彻底解决这一问题，但在一堆代码中间找一行全部大写的字符相对容易些，你的眼睛会感谢你。<br />\n<br />\n设置方法：菜单Tools -- Preferences -- Editor -- Keyword Case -- Uppercase\n</p>\n<p>\n	<br />\n5、特殊Copy\n</p>\n<p>\n	在SQL Window里写好的SQL语句通常需要放到Java或者别的语言内，就需要转成字符串并上加上相应的连字符，这一个事不需要再重复做了，在写好的SQL上点右键，使用特殊Copy即OK！\n</p>\n<p>\n	设置方法：鼠标右键 -- Special Copy\n</p>\n<p>\n	<br />\n6、自定义快捷键\n</p>\n<p>\n	PLSQL Developer里预留了很多键让用户自定义，这是件很Hight的事情。不像霸道的Word，基本上所有的键都已预定义了功能，修改起来很是头疼。 通常情况下，打开PLSQL Developer后，最经常干的事就是打开SQL Window和Command Window，就给这两个操作定义了快捷键，ALT+S和ALT+ C，这样拿鼠标点三下的事情只需要按一下键。\n</p>\n<p>\n	设置方法：菜单Tools -- Preferences -- Key Configuration\n</p>\n<p>\n	<br />\n7、SQL Window中根据光标位置自动选择语句\n</p>\n<p>\n	设置方法：Preferences -- Window Types -- SQL Window，将AutoSelect statement选中即可。注意，每条语句后面要加分号。\n</p>\n<p>\n	8、自动替换\n</p>\n<p>\n	快捷输入SQL语句，例如输入s，按下空格，自动替换成SELECT；再例如，输入sf，按下空格，自动替换成SELECT * FROM，非常方便，节省了大量的时间去编写重复的SQL语句。\n</p>\n<p>\n	设置方法：菜单Tools -- Preferences -- Editor -- AutoReplace. -- Edit\n</p>\n<p>\n	来自:<a href=\"http://yangshen998.iteye.com/blog/1471795\">http://yangshen998.iteye.com/blog/1471795</a> \n</p>','2012-12-30 00:36:42',NULL,NULL,NULL,'7','0','1',NULL,NULL,'plsql,oracle','0');
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('23','CloudFoundry使用指南','vmc下载、安装、设置、上传、更新等命令的实例，还有一些使用经验。','<p>\n	CloudFoundry 是VMware主导使用Ruby开发的一款开源PaaS云计算平台，遵从OpenStack云计算平台规范。\n</p>\n<p>\n	既然是paas那我们就可以使用上面的服务，将我们开发的应用托管到<span>CloudFoundry上。</span>\n</p>\n<p>\n	我们的应用依赖于<span>CloudFoundry吗？需要为<span>CloudFoundry做特殊的处理吗？</span></span>\n</p>\n<p>\n	<span>以java spring来说，<span>CloudFoundry虽然提供了很多配置标签，但你可以完全不用，那些标签只是为了简化配置和更容易使用paas上的服务。只要你的应用能在本地web容器(tomcat,jetty…)上运行，那么就可以在CloudFoundry上运行。</span></span>\n</p>\n<p>\n	<span><span>  当然如果你想开发测试时也运行在paas环境中，你也不必每次都上传到paas中，可以使用本地的CloudFoundry环境<a href=\"http://cndocs.cloudfoundry.com/infrastructure/micro/installing-mcf.html\">Micro Cloud Foundry</a>。<br />\n</span></span>\n</p>\n<p>\n	<span>专注于您的应用而不是环境。</span>\n</p>\n<p>\n	<span>那么应用开发完成后如何将应用托管到上面呐？<span>CloudFoundry提供两种部署和管理工具。</span></span>\n</p>\n<p>\n	<span>  vmc(命令行工具)</span>\n</p>\n<p>\n	<span>  eclipse插件(sts or Cloud Foundry Integration for Eclipse)<br />\n</span>\n</p>\n<p>\n	<span>Eclipse插件是图形化的界面，比较友好，安装使用比较简单，安装在Eclipse market中就有，<a href=\"http://cndocs.cloudfoundry.com/tools/STS/configuring-STS.html\" target=\"_blank\">安装使用说明</a>。</span>\n</p>\n<p>\n	下面讲下windows系统的vmc\n</p>\n<p>\n	首先要安装ruby，然后使用gem命令安装vmc\n</p>\n<p>\n	这两个是<a href=\"http://www.mopaas.com\" target=\"_blank\">mopaas</a>中提供的安装文件\n</p>\n<p>\n	<div>\n		<a href=\"\">rubyinstaller-1.9.3-p327.exe</a>\n	</div>\n	<p>\n		<a href=\"\">vmc-0.3.18.gem</a>\n	</p>\n	<p>\n		ruby是个exe，下一步就行了。\n	</p>\n	<p>\n		安装完后打开开始菜单中的Start Command Prompt with Ruby\n	</p>\n然后安装vmc，直接用命令gem install vmc安装的是最新版，我用时有写问题，而且目前推荐用0.3.18版本，咱就安装下载到的<a href=\"\">vmc-0.3.18.gem</a>就好了\n</p>\n<p>\n	命令：vmc install e:\\download\\vmc-0.3.18.gem\n</p>\n<p>\n	注意路径换成自己磁盘中的路径,安装很快会有些提示。\n</p>\n<p>\n	安装完vmc后就可以上传你的应用了。注：以下命令都可以在命令行中用help查看用法。\n</p>\n<p>\n	首先设置vmc的target，就是目标paas环境，默认的就是官方的不用改了，如果你想用其他服务商提供的cloudFoundry环境就要更改target\n</p>\n<p>\n	显示命令：vmc target\n</p>\n<p>\n	设置命令：vmc target api.mopaas.com\n</p>\n<p>\n	注：上面将target指向了莫怕网的paas。\n</p>\n<p>\n	好，现在就要登录了\n</p>\n<p>\n	命令：vmc login\n</p>\n<p>\n	输入：用户名\n</p>\n<p>\n	输入：密码\n</p>\n<p>\n	提示：登录成功或失败……\n</p>\n<p>\n	登录后就可以上次自己的应用了\n</p>\n<p>\n	首先需要将应用编译好，我喜欢进入应用目录上传，进入编译后的目录，不是源码哦，就是发布到tomcat中的那个目录，也是war包中那些文件的目录。\n</p>\n<p>\n	进入后。注：以下cat是我的app名称，你的随便换\n</p>\n<p>\n	<span>如果是第一次上传，</span>命令：vmc push cat\n</p>\n<p>\n	提示：部署当前目录？\n</p>\n<p>\n	回车\n</p>\n<p>\n	提示：是java的spring应用？\n</p>\n<p>\n	回车（不是的话 n回车自选）\n</p>\n<p>\n	提示：输入url\n</p>\n<p>\n	回车（用默认的cat.cloudfoundry.com,不想用就自己写个再回车）\n</p>\n<p>\n	提示：内存？（默认512，你可以自选）\n</p>\n<p>\n	提示：实例？（默认1个）\n</p>\n<p>\n	提示：绑定现有服务到cat上？（服务就是数据库、缓存啥的，第一次当然没有这步了，掠过）\n</p>\n<p>\n	提示：创建并绑定服务？（当然，输入y回车）\n</p>\n<p>\n	提示了几个服务类型，选择并回车，我用mysql输入2回车\n</p>\n<p>\n	提示：服务的名字？（默认的不好看，自己写个回车）\n</p>\n<p>\n	提示：创建其他服务？（不用了，回车）\n</p>\n<p>\n	//写的好麻烦啊，命令行你应该会用吧圆括号中的是给你选择的，方括号中的是默认值，方括号中的yn中大写的是默认值。而且我看vmc新版本中的提示方式也变化了，自己领悟吧，这都不会那还玩个鸟啊。\n</p>\n<p>\n	提示：保存此次配置？（我都不保存，回车）\n</p>\n<p>\n	这是就开始创建各种服务了……\n</p>\n<p>\n	如图吧，如果提示名称已经被使用了，就换个url重复上边的流程。\n</p>\n<p>\n	<img src=\"https://ldyiga.bay.livefilestore.com/y1pt69NLH0CYIgOecpIwrRxOUo1t9HAXkPzdB2I-dd7UFxLss_4Fy5iUWb7DwDlcq-Z4x8t7Yo81lGzC-TiXKByxhYztQzEsMhW/vmc.jpg\" alt=\"\" />\n</p>\n<p>\n	那么如何更新呐？\n</p>\n<p>\n	还是进入那个目录后\n</p>\n<p>\n	用命令：vmc update cat\n</p>\n<p>\n	看日志？\n</p>\n<p>\n	vmc logs cat\n</p>\n<p>\n	更多帮助用vmc help\n</p>\n<p>\n	<br />\n</p>\n<p>\n	其实还可以选java web环境，但需要自己去看服务mysql的连接信息，比较麻烦，所以选spring环境，环境会根据你的配置自动帮你注入服务的实例。\n</p>\n<p>\n	就访问速度来说国内的mopaas比较快，appfog速度也可以，cloudFoundry.com也算可以比openshift的paas快多了。\n</p>\n<p>\n	mopaas提供了查看服务环境变量（如mysql连接信息）的功能，比较贴心。\n</p>\n<p>\n	appfog是可以绑域名的。\n</p>\n<p>\n	appfog有个问题，就是内存用512必然是无法启动的。appfog的vmc工具是改造过的，叫af。gem install af。\n</p>\n<p>\n	mopaas对我很不待见，怎么搞数据库都乱码，我的代码别人部署就不乱。\n</p>\n<p>\n	openshift超慢，而且问题较多，但能用ssh管理，用git上传代码自动编译部署，这点挺好。\n</p>','2012-12-30 15:00:22',NULL,NULL,NULL,'1','0','1',NULL,NULL,'CloudFoundry,mopaas,vmc,java,spring','0');
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('24','为什么会有cat这个项目，未来是什么样的？','','<p>\n	自己不是学软件开发的，大学毕业三年后才去培了个训进入这个行业。如今已经两年的开发经验了，做过Eclipse插件、flex、java web，虽然自己始终在不停的学习，但感觉自己始终是个菜鸟，在公司里都是：你去做个***，我就去做，具体怎么做都得自己纠结，一直没有好的软件思想来影响我，功能实现是能实现但代码写的一塌糊涂，虽然自己一直想着继承、封装、多态、重构和各种原则。而且工资也不好，所以几个月前换了一家公司，表面看上去是我想象的那种开发流程规范、开发思想先进、能把握带上道的公司，但进去后发现代码乱的一塌糊涂，方法都行数都上百、一个类几千行、一个页面几千行，蛋疼的一塌糊涂，如今又走了几个人，目前的开发状况是没人设计，就几个人在哪里纠结，我提的意见以时间问题都不采纳。第一次这么绝望。不过没关系，我可以自己来，我做我自己的产品，我把我的想法实现并优化，我要整理好的风格好的用发和最佳实践。\n</p>\n<p>\n	这个项目我其实想的很大，想来想去发现这样出产品太慢。互联网产品就要迅速出产品，不断更新不断有新功能，这样才能吸引用户。\n</p>\n<p>\n	所以我的计划，首先做个博客出来，然后在加****功能。\n</p>\n<p>\n	我想象中这个项目应该有这些功能：\n</p>\n<p>\n	1.多用户社区\n</p>\n<p>\n	2.各种开放平台服务的集成（登录、分享、存储、dnspod…）\n</p>\n<p>\n	3.购买支付功能\n</p>\n<p>\n	4.失踪寻人、环保、公益\n</p>\n<p>\n	<br />\n</p>','2012-12-30 15:45:51',NULL,NULL,NULL,'0','0','1',NULL,NULL,'cat,java,spring','0');
insert into `article` (`id`, `title`, `description`, `content`, `create_time`, `modify_time`, `alias`, `url`, `view_count`, `comment_count`, `author_id`, `cover`, `category_id`, `tags`, `topable`) values('25','cat使用技术说明','众多技术、众多开源软件你选择了什么，你用的开心吗？来看看我的心得。并求指点。','<p>\n	<br class=\"Apple-interchange-newline\" />\n语言当然是最熟悉的java，java其实很好，在中国也会坚挺很多年。\n</p>\n<p>\n	spring：spring是我从开始学框架ssh时就认为是最奇妙的框架，我欣赏spring。\n</p>\n<p>\n	springmvc：2.5时springmvc我就很感兴趣，自己研究了很长时间，到spring3之后他的映射和入参更是相当优美；struts2最令我蛋疼的就是接收参数。\n</p>\n<p>\n	--我看到很多博客设置开源项目上springmvc的用法比较不同，很多用法很原始很怪异，而我从文档、书中以及网络中众多参考下来形成了我的用法，我希望能够和众多开发人员分享我的实践，也希望对我的用法提出改进意见，用好的而不是拙略的经验影响众多学习者。\n</p>\n<p>\n	使用@ResponseBody不能return model，所以选择ContentNegotiatingViewResolver这样同一个方法既可以处理ajax请求将model响应回去又可以处理页面请求。\n</p>\n<p>\n	springjdbc：hibernate我一直就不怎么会用；mybits我看可以把sql写到xml中又可以写到纯接口中又可以写在dao实现类中，一下就难倒我了，我最怕选择了；jdbc算了吧，形式代码太多；springjdbc既简单又简洁。\n</p>\n<p>\n	restful：面对众多需求，restful并没有具体的解决方案，还是自己慢慢积累一套好的url设计思路吧。\n</p>\n<p>\n	freemarker：工作中基本没用过，所以用这玩玩。\n</p>\n<p>\n	皮肤系统：没想好怎么表达，骚后再说吧！\n</p>\n<p>\n	shiro：如果熟悉认证流程自己做个更简单的就行，我毫无经验就用这个了。shiro提供了一条jsp标签用于页面的权限控制，但我用freemarker怎么办？据说freemarker支持jsp标签，百试而不成！一怒之下参考jsp标签源码和github上的一个类似项目写了一套shiro的freemarker指令。shiro的普通登录认证是搞定了，但如何同开放平台的登录结合起来呐？这是一个需要研究的问题。\n</p>\n<p>\n	在开发过程中一个意外也耗费了我很长时间，就是我的springmvc没有提供登录/login的post方法(因为这个是shiro去处理的)，那么认证出错之后就会跳到成功页面，但并没登录成功。测试了好久才发现这个问题，所以springmvc的登录页面方法只能把method=POST去掉了。\n</p>\n<p>\n	bootstrap：比较美观的ui，<span>文档英文不怎么看的懂，还好有例子，感觉文档不是很全面。</span>但如今看来想做复杂的界面光靠bootstrap和半吊子css还是力不从心的。bootstrap3将不支持ie78了，有空试试jqueryui做个皮肤。若有想为cat开发皮肤的好基友我非常欢迎。\n</p>\n<p>\n	maven：就是麻烦的代名词，除了管理依赖别的我都不会用。\n</p>\n<p>\n	druid：连接池，貌似CloudFoundry自动配置后就不是他了\n</p>\n<p>\n	校验：jquery validate用法完全不符合我的习惯，还好表单很少，页面就没校验。springmvc中用@valid和hibernate-validator进行校验。\n</p>\n<p>\n	缓存：shiro配了ehcache。但应用也需要缓存，我不知道怎么直接用这个shiro配置的，目前我仅缓存了少量的数据到map中。希望会用缓存的同学指点ehcache或其他缓存使用的最佳实践。\n</p>\n<p>\n	<br />\n</p>\n<p>\n	感谢开源软件，感谢众多分享者\n</p>\n<p>\n	shiro的使用参考官方文档、springside4和许多博客；freemarker及皮肤部分参考官方文档和b3log solo；spring mvc jdbc参考官方文档和书籍。\n</p>','2012-12-30 16:27:58',NULL,NULL,NULL,'1','0','1',NULL,NULL,'java,cat,spring,springmvc,springjdbc,restful,freemarker,shiro,bootstrap,maven,druid','0');
delete from tag;
insert  into `tag`(`id`,`name`,`ref_count`) values (7,'我谈恋爱了',1),(8,'失恋',1),(9,'我被人甩了',1),(10,'我失恋了',1),(11,'十万个冷笑话',1),(12,'4G',1),(13,'MongoDB',1),(14,'Windows',1),(15,'html5',1),(16,'paas',2),(17,'java',5),(18,'cloud foundry',1),(19,'gae',2),(20,'openshift',1),(21,'VMware',1),(22,'SpringSource',1),(23,'笑话',1),(24,'娱乐',6),(25,'全国人大',1),(26,'java7',1),(27,'plsql',1),(28,'oracle',1),(29,'反射',1),(30,'swt&jface',1),(31,'CloudFoundry',1),(32,'mopaas',1),(33,'vmc',1),(34,'spring',3),(35,'cat',2),(36,'springmvc',1),(37,'springjdbc',1),(38,'restful',1),(39,'freemarker',1),(40,'shiro',1),(41,'bootstrap',1),(42,'maven',1),(43,'druid',1);
delete from tag_ref;
insert  into `tag_ref`(`id`,`tag_id`,`target_id`,`type`) values (11,7,6,1),(12,8,7,1),(13,9,7,1),(14,10,7,1),(15,11,8,1),(16,12,9,1),(19,15,11,1),(20,16,12,1),(21,17,12,1),(22,18,12,1),(23,19,12,1),(24,20,12,1),(25,21,13,1),(26,22,13,1),(28,23,15,1),(29,24,16,1),(30,24,17,1),(31,25,18,1),(32,19,19,1),(33,26,19,1),(34,27,20,1),(35,28,20,1),(39,24,6,1),(40,24,7,1),(41,24,8,1),(42,24,15,1),(43,31,23,1),(44,32,23,1),(45,33,23,1),(46,17,23,1),(47,34,23,1),(48,35,24,1),(49,17,24,1),(50,34,24,1),(51,17,25,1),(52,35,25,1),(53,34,25,1),(54,36,25,1),(55,37,25,1),(56,38,25,1),(57,39,25,1),(58,40,25,1),(59,41,25,1),(60,42,25,1),(61,43,25,1);
delete from link;
insert  into `link`(`id`,`name`,`url`,`description`,`category_id`,`rank`) values (14,'cloudfoundry','http://www.cloudfoundry.cn/','',2,0),(15,'我的博客','http://www.noday.net','',2,0),(16,'开源中国社区','http://www.oschina.net/','',2,0),(17,'B3log社区','http://symphony.b3log.org','',2,0),(18,'Cloud Foundry应用开发大赛','http://www.oschina.net/cloudfoundry-app-contest','',2,0),(19,'InfoQ','http://www.infoq.com/cn/','',2,0),(20,'ITEYE','http://www.iteye.com/','',2,0),(21,'微世界','http://www.xcloudz.com','',2,0),(22,'阿里云','http://www.aliyun.com','',2,0),(23,'GITHUB','https://github.com','',2,0);
delete from nav;
insert  into `nav`(`id`,`name`,`url`,`rank`,`pid`) values (3,'娱乐','http://cat.noday.net:8180/cat/tags/%E5%A8%B1%E4%B9%90',0,NULL),(4,'java','http://cat.noday.net:8180/cat/tags/java',1,NULL);